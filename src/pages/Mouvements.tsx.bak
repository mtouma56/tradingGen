import React, { useState, useEffect, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useTranslation } from 'react-i18next'
import {
  TrendingUp,
  TrendingDown,
  Package,
  Truck,
  ArrowUpDown,
  Calendar,
  Filter,
  Download,
  RefreshCw,
  Clock,
  MapPin,
  User,
  FileText,
  ChevronDown,
  ChevronUp,
  Search,
  Eye,
  Plus,
  Minus
} from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/Card'
import { Button } from '../components/ui/Button'
import { Input } from '../components/ui/Input'
import { Badge } from '../components/ui/Badge'
import { KPICard } from '../components/ui/KPICard'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/Select'
import { PageLoader } from '../components/ui/LoadingSpinner'
import { EmptyState } from '../components/ui/EmptyState'
import { Operation, Depot } from '../types'
import { repository } from '../lib/repositories'
import { formatFCFA, formatKg, formatDate, formatDateTime, exportToCSV } from '../lib/utils'

interface MouvementStock {
  id: string
  date_mouvement: Date
  type: 'entree' | 'sortie'
  operation_id: string
  operation_type: 'achat' | 'vente'
  produit: string
  depot_id: string
  depot_nom: string
  quantite_kg: number
  valeur_unitaire: number
  valeur_totale: number
  point: string
  reference?: string
  notes?: string
  metadata?: any
}

export function Mouvements() {
  const { t } = useTranslation()
  const [mouvements, setMouvements] = useState<MouvementStock[]>([])
  const [depots, setDepots] = useState<Depot[]>([])
  const [loading, setLoading] = useState(true)
  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set())

  // Filtres
  const [filters, setFilters] = useState({
    produit: '',
    depot_id: '',
    type: '', // entree, sortie
    operation_type: '', // achat, vente
    periode: '30', // derniers 30 jours
    search: ''
  })

  const chargerDonnees = async () => {
    setLoading(true)
    try {
      // Charger les opérations et dépôts
      const [operations, depotsData] = await Promise.all([
        repository.getOperations(),
        repository.getDepots()
      ])

      setDepots(depotsData.filter(d => d.actif))

      // Convertir les opérations en mouvements de stock
      const mouvementsData: MouvementStock[] = []

      operations.forEach(operation => {
        const depot = depotsData.find(d => d.id === operation.depot_id)

        if (operation.type === 'achat') {
          // Entrée de stock pour un achat
          mouvementsData.push({
            id: `${operation.id}_entree`,
            date_mouvement: operation.date_operation,
            type: 'entree',
            operation_id: operation.id,
            operation_type: 'achat',
            produit: operation.produit,
            depot_id: operation.depot_id,
            depot_nom: depot?.nom || 'Dépôt inconnu',
            quantite_kg: operation.quantite_kg,
            valeur_unitaire: operation.cout_total_par_kg || 0,
            valeur_totale: (operation.cout_total_par_kg || 0) * operation.quantite_kg,
            point: operation.point_achat || 'Non spécifié',
            reference: `ACHAT-${(operation.id || 'UNKNOWN').slice(-6)}`,
            metadata: {
              prix_achat_par_kg: operation.prix_achat_par_kg,
              chargement_par_kg: operation.chargement_par_kg,
              transport_par_kg: operation.transport_par_kg,
              autres_depenses_par_kg: operation.autres_depenses_par_kg
            }
          })
        } else if (operation.type === 'vente') {
          // Sortie de stock pour une vente
          mouvementsData.push({
            id: `${operation.id}_sortie`,
            date_mouvement: operation.date_operation,
            type: 'sortie',
            operation_id: operation.id,
            operation_type: 'vente',
            produit: operation.produit,
            depot_id: operation.depot_id,
            depot_nom: depot?.nom || 'Dépôt inconnu',
            quantite_kg: operation.quantite_kg,
            valeur_unitaire: operation.prix_vente_par_kg || 0,
            valeur_totale: operation.chiffre_affaires || 0,
            point: operation.point_vente || 'Non spécifié',
            reference: `VENTE-${(operation.id || 'UNKNOWN').slice(-6)}`,
            metadata: {
              prix_vente_par_kg: operation.prix_vente_par_kg,
              cogs_par_kg: operation.cogs_par_kg,
              marge_nette_par_kg: operation.marge_nette_par_kg,
              marge_totale: operation.marge_totale
            }
          })
        }
      })

      // Trier par date décroissante
      mouvementsData.sort((a, b) => b.date_mouvement.getTime() - a.date_mouvement.getTime())

      setMouvements(mouvementsData)
    } catch (error) {
      console.error('Erreur lors du chargement des mouvements:', error)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    chargerDonnees()
  }, [])

  // Données filtrées
  const filteredMouvements = useMemo(() => {
    let filtered = mouvements

    // Filtre par période
    if (filters.periode !== 'all') {
      const daysAgo = new Date()
      daysAgo.setDate(daysAgo.getDate() - parseInt(filters.periode))
      filtered = filtered.filter(mouvement => mouvement.date_mouvement >= daysAgo)
    }

    // Filtres spécifiques
    if (filters.produit) {
      filtered = filtered.filter(mouvement => 
        mouvement.produit.toLowerCase().includes(filters.produit.toLowerCase())
      )
    }
    if (filters.depot_id) {
      filtered = filtered.filter(mouvement => mouvement.depot_id === filters.depot_id)
    }
    if (filters.type) {
      filtered = filtered.filter(mouvement => mouvement.type === filters.type)
    }
    if (filters.operation_type) {
      filtered = filtered.filter(mouvement => mouvement.operation_type === filters.operation_type)
    }
    if (filters.search) {
      const searchLower = filters.search.toLowerCase()
      filtered = filtered.filter(mouvement => 
        mouvement.point.toLowerCase().includes(searchLower) ||
        mouvement.reference?.toLowerCase().includes(searchLower) ||
        mouvement.produit.toLowerCase().includes(searchLower)
      )
    }

    return filtered
  }, [mouvements, filters])

  // Grouper par date pour la timeline
  const mouvementsGroupes = useMemo(() => {
    const groupes: Record<string, MouvementStock[]> = {}

    filteredMouvements.forEach(mouvement => {
      const dateKey = formatDate(mouvement.date_mouvement)
      if (!groupes[dateKey]) {
        groupes[dateKey] = []
      }
      groupes[dateKey].push(mouvement)
    })

    return Object.entries(groupes)
      .sort(([dateA], [dateB]) => new Date(dateB).getTime() - new Date(dateA).getTime())
  }, [filteredMouvements])

  // Calcul des KPIs
  const kpis = useMemo(() => {
    const entrees = filteredMouvements.filter(m => m.type === 'entree')
    const sorties = filteredMouvements.filter(m => m.type === 'sortie')
    
    return {
      totalMouvements: filteredMouvements.length,
      totalEntrees: entrees.length,
      totalSorties: sorties.length,
      quantiteEntree: entrees.reduce((sum, m) => sum + m.quantite_kg, 0),
      quantiteSortie: sorties.reduce((sum, m) => sum + m.quantite_kg, 0),
      valeurEntree: entrees.reduce((sum, m) => sum + m.valeur_totale, 0),
      valeurSortie: sorties.reduce((sum, m) => sum + m.valeur_totale, 0),
    }
  }, [filteredMouvements])

  // Handlers
  const toggleExpand = (mouvementId: string) => {
    const newExpanded = new Set(expandedItems)
    if (newExpanded.has(mouvementId)) {
      newExpanded.delete(mouvementId)
    } else {
      newExpanded.add(mouvementId)
    }
    setExpandedItems(newExpanded)
  }

  const handleExport = () => {
    if (filteredMouvements.length === 0) return
    
    const dataToExport = filteredMouvements.map(mouvement => ({
      Date: formatDateTime(mouvement.date_mouvement),
      Type: mouvement.type === 'entree' ? 'ENTRÉE' : 'SORTIE',
      'Type opération': mouvement.operation_type.toUpperCase(),
      Produit: mouvement.produit,
      Dépôt: mouvement.depot_nom,
      'Quantité (kg)': mouvement.quantite_kg,
      'Valeur unitaire (FCFA)': mouvement.valeur_unitaire,
      'Valeur totale (FCFA)': mouvement.valeur_totale,
      Point: mouvement.point,
      Référence: mouvement.reference || '',
    }))

    exportToCSV(dataToExport, `mouvements_${filters.periode}j`)
  }

  if (loading) {
    return <PageLoader text={t('common.loading')} />
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex flex-col md:flex-row gap-4 items-start md:items-center justify-between"
      >
        <div>
          <h1 className="text-2xl md:text-3xl font-bold">Mouvements de Stock</h1>
          <p className="text-muted-foreground mt-1">Historique des entrées et sorties</p>
        </div>
        
        <div className="flex flex-col sm:flex-row gap-2">
          <Button variant="ghost" onClick={chargerDonnees}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Actualiser
          </Button>
          <Button 
            variant="outline" 
            onClick={handleExport}
            disabled={filteredMouvements.length === 0}
          >
            <Download className="h-4 w-4 mr-2" />
            {t('common.export')}
          </Button>
        </div>
      </motion.div>

      {/* KPI Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <KPICard
          title="Total mouvements"
          value={kpis.totalMouvements}
          icon={ArrowUpDown}
          iconColor="bg-primary"
        />
        <KPICard
          title="Entrées"
          value={`${kpis.totalEntrees} (${formatKg(kpis.quantiteEntree)})`}
          icon={TrendingUp}
          iconColor="bg-secondary"
        />
        <KPICard
          title="Sorties"
          value={`${kpis.totalSorties} (${formatKg(kpis.quantiteSortie)})`}
          icon={TrendingDown}
          iconColor="bg-destructive"
        />
        <KPICard
          title="Solde période"
          value={formatKg(kpis.quantiteEntree - kpis.quantiteSortie)}
          icon={Package}
          iconColor="bg-accent"
        />
      </div>

      {/* Filtres */}
      <Card className="rounded-2xl">
        <CardContent className="pt-6">
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Période</label>
              <Select value={filters.periode} onValueChange={(value) => setFilters(prev => ({ ...prev, periode: value }))}>
                <SelectTrigger className="h-9">
                  <Calendar className="h-4 w-4 mr-2" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="7">7 derniers jours</SelectItem>
                  <SelectItem value="30">30 derniers jours</SelectItem>
                  <SelectItem value="90">90 derniers jours</SelectItem>
                  <SelectItem value="all">Toutes les données</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">Recherche</label>
              <Input
                placeholder="Référence, point..."
                value={filters.search}
                onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
                className="h-9"
              />
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">Produit</label>
              <Input
                placeholder="Nom du produit..."
                value={filters.produit}
                onChange={(e) => setFilters(prev => ({ ...prev, produit: e.target.value }))}
                className="h-9"
              />
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">Dépôt</label>
              <Select value={filters.depot_id} onValueChange={(value) => setFilters(prev => ({ ...prev, depot_id: value }))}>
                <SelectTrigger className="h-9">
                  <SelectValue placeholder="Tous les dépôts" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Tous les dépôts</SelectItem>
                  {depots.map(depot => (
                    <SelectItem key={depot.id} value={depot.id}>{depot.nom}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">Type mouvement</label>
              <Select value={filters.type} onValueChange={(value) => setFilters(prev => ({ ...prev, type: value }))}>
                <SelectTrigger className="h-9">
                  <SelectValue placeholder="Tous les types" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Tous les types</SelectItem>
                  <SelectItem value="entree">Entrées</SelectItem>
                  <SelectItem value="sortie">Sorties</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">Opération</label>
              <Select value={filters.operation_type} onValueChange={(value) => setFilters(prev => ({ ...prev, operation_type: value }))}>
                <SelectTrigger className="h-9">
                  <SelectValue placeholder="Toutes" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Toutes</SelectItem>
                  <SelectItem value="achat">Achats</SelectItem>
                  <SelectItem value="vente">Ventes</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Timeline des mouvements */}
      <Card className="rounded-2xl">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Timeline des mouvements ({filteredMouvements.length})</span>
            <Button variant="ghost" size="sm" onClick={chargerDonnees}>
              <RefreshCw className="h-4 w-4" />
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {filteredMouvements.length === 0 ? (
            <EmptyState
              title="Aucun mouvement trouvé"
              description="Aucun mouvement de stock ne correspond aux critères"
              action={{
                label: "Réinitialiser les filtres",
                onClick: () => setFilters({ 
                  produit: '', 
                  depot_id: '', 
                  type: '', 
                  operation_type: '', 
                  periode: '30',
                  search: ''
                })
              }}
            />
          ) : (
            <div className="space-y-8">
              <AnimatePresence>
                {mouvementsGroupes.map(([date, mouvementsJour], groupIndex) => (
                  <motion.div
                    key={date}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ delay: groupIndex * 0.1 }}
                    className="relative"
                  >
                    {/* Date separator */}
                    <div className="flex items-center gap-4 mb-6">
                      <div className="flex-shrink-0 bg-primary text-primary-foreground px-3 py-2 rounded-full text-sm font-medium">
                        {date}
                      </div>
                      <div className="flex-1 h-px bg-border" />
                      <Badge variant="outline" className="text-xs">
                        {mouvementsJour.length} mouvement{mouvementsJour.length > 1 ? 's' : ''}
                      </Badge>
                    </div>

                    {/* Mouvements du jour */}
                    <div className="space-y-4 ml-4 border-l-2 border-muted pl-6">
                      {mouvementsJour.map((mouvement, index) => (
                        <motion.div
                          key={mouvement.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: (groupIndex * 0.1) + (index * 0.05) }}
                          className="relative"
                        >
                          {/* Timeline dot */}
                          <div className={`
                            absolute -left-8 top-4 w-4 h-4 rounded-full border-2 border-background
                            ${mouvement.type === 'entree' 
                              ? 'bg-secondary' 
                              : 'bg-destructive'
                            }
                          `} />

                          {/* Mouvement card */}
                          <Card className="rounded-xl hover:shadow-md transition-shadow">
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between">
                                <div className="flex-1">
                                  <div className="flex items-center gap-3 mb-2">
                                    {/* Type badge */}
                                    <Badge 
                                      variant={mouvement.type === 'entree' ? 'default' : 'destructive'}
                                      className="gap-1"
                                    >
                                      {mouvement.type === 'entree' ? (
                                        <><Plus className="h-3 w-3" />ENTRÉE</>
                                      ) : (
                                        <><Minus className="h-3 w-3" />SORTIE</>
                                      )}
                                    </Badge>

                                    {/* Operation type */}
                                    <Badge variant="outline" className="text-xs">
                                      {mouvement.operation_type.toUpperCase()}
                                    </Badge>

                                    {/* Reference */}
                                    <span className="text-xs text-muted-foreground font-mono">
                                      {mouvement.reference}
                                    </span>

                                    {/* Time */}
                                    <div className="flex items-center gap-1 text-xs text-muted-foreground">
                                      <Clock className="h-3 w-3" />
                                      {formatDateTime(mouvement.date_mouvement).split(' ')[1]}
                                    </div>
                                  </div>

                                  {/* Main info */}
                                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                    <div>
                                      <div className="flex items-center gap-2 mb-1">
                                        <Package className="h-4 w-4 text-muted-foreground" />
                                        <span className="font-semibold">{mouvement.produit}</span>
                                      </div>
                                      <p className="text-sm text-muted-foreground">{mouvement.depot_nom}</p>
                                    </div>

                                    <div>
                                      <p className="text-sm text-muted-foreground">Quantité</p>
                                      <p className="font-medium">{formatKg(mouvement.quantite_kg)}</p>
                                    </div>

                                    <div>
                                      <p className="text-sm text-muted-foreground">Valeur unitaire</p>
                                      <p className="font-medium">{formatFCFA(mouvement.valeur_unitaire)}</p>
                                    </div>

                                    <div>
                                      <p className="text-sm text-muted-foreground">Valeur totale</p>
                                      <p className={`font-semibold ${
                                        mouvement.type === 'entree' ? 'text-destructive' : 'text-secondary'
                                      }`}>
                                        {mouvement.type === 'entree' ? '-' : '+'}{formatFCFA(mouvement.valeur_totale)}
                                      </p>
                                    </div>
                                  </div>

                                  {/* Point info */}
                                  <div className="flex items-center gap-2 mt-3 text-sm text-muted-foreground">
                                    <MapPin className="h-4 w-4" />
                                    <span>{mouvement.point}</span>
                                  </div>
                                </div>

                                {/* Actions */}
                                <div className="flex flex-col gap-2 ml-4">
                                  <Button
                                    size="sm"
                                    variant="ghost"
                                    onClick={() => toggleExpand(mouvement.id)}
                                    className="h-8 w-8 p-0"
                                  >
                                    {expandedItems.has(mouvement.id) ? (
                                      <ChevronUp className="h-4 w-4" />
                                    ) : (
                                      <ChevronDown className="h-4 w-4" />
                                    )}
                                  </Button>
                                </div>
                              </div>

                              {/* Détails expandus */}
                              <AnimatePresence>
                                {expandedItems.has(mouvement.id) && (
                                  <motion.div
                                    initial={{ opacity: 0, height: 0 }}
                                    animate={{ opacity: 1, height: 'auto' }}
                                    exit={{ opacity: 0, height: 0 }}
                                    className="mt-4 pt-4 border-t"
                                  >
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                                      {mouvement.metadata && Object.entries(mouvement.metadata).map(([key, value]) => (
                                        <div key={key} className="flex justify-between">
                                          <span className="text-muted-foreground capitalize">
                                            {key.replace(/_/g, ' ')}:
                                          </span>
                                          <span className="font-medium">
                                            {typeof value === 'number' ? formatFCFA(value) : String(value)}
                                          </span>
                                        </div>
                                      ))}
                                    </div>
                                  </motion.div>
                                )}
                              </AnimatePresence>
                            </CardContent>
                          </Card>
                        </motion.div>
                      ))}
                    </div>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}